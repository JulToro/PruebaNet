// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaNet.Datos.Context;

namespace PruebaNet.WebApi.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20190523153901_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.Category", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Name");

                    b.Property<int>("ProductId");

                    b.Property<int>("Tax");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Addres");

                    b.Property<string>("City");

                    b.Property<string>("Email");

                    b.Property<string>("IPAddress");

                    b.Property<int>("Identification");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("Cantidad");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.Order", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Comments")
                        .IsRequired();

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.OrderClient", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("OrderClient");
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.OrderDetail", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Commentary")
                        .IsRequired();

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.PLU", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("CategoryId");

                    b.Property<long?>("CategoryId1");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("NumberPLU");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId1");

                    b.ToTable("PLU");
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.Product", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Brand")
                        .IsRequired();

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.Category", b =>
                {
                    b.HasOne("PruebaNet.Datos.EntitiesTable.Product", "Product")
                        .WithOne("Category")
                        .HasForeignKey("PruebaNet.Datos.EntitiesTable.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.Order", b =>
                {
                    b.HasOne("PruebaNet.Datos.EntitiesTable.OrderClient", "OrderClient")
                        .WithMany("Orders")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.OrderClient", b =>
                {
                    b.HasOne("PruebaNet.Datos.EntitiesTable.Client", "Client")
                        .WithOne("OrderClient")
                        .HasForeignKey("PruebaNet.Datos.EntitiesTable.OrderClient", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PruebaNet.Datos.EntitiesTable.Employee", "Employee")
                        .WithOne("OrderClient")
                        .HasForeignKey("PruebaNet.Datos.EntitiesTable.OrderClient", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.OrderDetail", b =>
                {
                    b.HasOne("PruebaNet.Datos.EntitiesTable.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.PLU", b =>
                {
                    b.HasOne("PruebaNet.Datos.EntitiesTable.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId1");

                    b.HasOne("PruebaNet.Datos.EntitiesTable.Product", "Product")
                        .WithOne("PLU")
                        .HasForeignKey("PruebaNet.Datos.EntitiesTable.PLU", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PruebaNet.Datos.EntitiesTable.Product", b =>
                {
                    b.HasOne("PruebaNet.Datos.EntitiesTable.Inventory", "Inventory")
                        .WithOne("Product")
                        .HasForeignKey("PruebaNet.Datos.EntitiesTable.Product", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PruebaNet.Datos.EntitiesTable.OrderDetail", "OrderDetail")
                        .WithOne("Product")
                        .HasForeignKey("PruebaNet.Datos.EntitiesTable.Product", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
